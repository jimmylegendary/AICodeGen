{
    "old": " Keypoints sourceKp;n Descriptors sourceDesc;n n- if (!alg.extractFeatures(sourceImage, sourceKp, sourceDesc))n return false;n n std::vector<float> x = transformation.getX();n",
    "new": " Keypoints sourceKp;n Descriptors sourceDesc;n n+ cv::Mat gray;n+ if (sourceImage.channels() == 3)n+ cv::cvtColor(sourceImage, gray, CV_BGR2GRAY);n+ else if (sourceImage.channels() == 4)n+ cv::cvtColor(sourceImage, gray, CV_BGRA2GRAY);n+ else if(sourceImage.channels() == 1)n+ gray = sourceImage;n+n+ if (!alg.extractFeatures(gray, sourceKp, sourceDesc))n return false;n n std::vector<float> x = transformation.getX();n",
"comment": "optimize"
}
{
    "old": " Descriptors resDesc;n Matches matches;n n- // To convert ticks to milisecondsn const double toMsMul = 1000. / cv::getTickFrequency();n n #pragma omp parallel for private(transformedImage, resKpReal, resDesc, matches)n",
    "new": " Descriptors resDesc;n Matches matches;n n+ // To convert ticks to millisecondsn const double toMsMul = 1000. / cv::getTickFrequency();n n #pragma omp parallel for private(transformedImage, resKpReal, resDesc, matches)n",
"comment": "optimize"
}
